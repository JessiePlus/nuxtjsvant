webpackJsonp([0],{EghV:function(e,t,n){(e.exports=n("FZ+f")(!1)).push([e.i,"body{margin:0}",""])},Ma2J:function(e,t,n){"use strict";Object.defineProperty(t,"__esModule",{value:!0});var r=n("STrE"),a=!1;var i=function(e){a||n("qjyk")},s=n("VU/8")(null,r.a,!1,i,null,null);s.options.__file="layouts\\default.vue",t.default=s.exports},STrE:function(e,t,n){"use strict";var r=function(){var e=this.$createElement,t=this._self._c||e;return t("div",[t("nuxt")],1)};r._withStripped=!0;var a={render:r,staticRenderFns:[]};t.a=a},qjyk:function(e,t,n){var r=n("EghV");"string"==typeof r&&(r=[[e.i,r,""]]),r.locals&&(e.exports=r.locals);n("rjj0")("02baf23e",r,!1,{sourceMap:!1})}});
//# sourceMappingURL=data:application/json;charset=utf-8;base64,